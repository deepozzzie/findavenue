<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD7Cpwya87bUmnIMkFc1penQMVhNkpUaaU&callback=initAutocomplete&libraries=places&v=weekly"
  defer>
</script>
<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>


<%= form_for(@company, html: { class: "form-horizontal", role: "form" }) do |f| %>
  <% if @company.errors.any? %>
    <div class="alert alert-danger alert-dismissable" role="alert">
      <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
      <h4><%= pluralize(@company.errors.count, "error") %> prohibited this company from being saved:</h4>

      <ul>
      <% @company.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <div class="form-group">
    <%= f.label :address, class: "col-sm-2 control-label" %>
    <div id="map" class="col-sm-10 col-lg-10"></div>

      <div class="col-sm-10">
        <%= f.text_field :address, class: "form-control" %>
      </div>

  </div>
  <div class="form-group">

      <%= f.label :name, class: "col-sm-2 control-label" %>
      <div class="col-sm-10">
        <%= f.text_field :name, class: "form-control" %>
      </div>

  </div>


  <div class="form-group">

      <%= f.label :lat, class: "col-sm-2 control-label" %>
      <div class="col-sm-10">
        <%= f.text_field :lat, class: "form-control" %>
      </div>

  </div>
  <div class="form-group">

      <%= f.label :lng, class: "col-sm-2 control-label" %>
      <div class="col-sm-10">
        <%= f.text_field :lng, class: "form-control" %>
      </div>

  </div>
  <div class="form-group">

      <%= f.label :phone_number, class: "col-sm-2 control-label" %>
      <div class="col-sm-10">
        <%= f.text_field :phone_number, class: "form-control" %>
      </div>

  </div>
  <div class="form-group">

      <%= f.label :link, class: "col-sm-2 control-label" %>
      <div class="col-sm-10">
        <%= f.text_field :link, class: "form-control" %>
      </div>

  </div>
  <div class="form-group">

      <%= f.label :capacity, class: "col-sm-2 control-label" %>
      <div class="col-sm-10">
        <%= f.text_field :capacity, class: "form-control" %>
      </div>

  </div>

  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
      <%= f.submit class: "btn btn-primary" %>
    </div>
  </div>
<% end %>


<script>
  // This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.
// This example requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
function initAutocomplete() {
  const map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: -33.8688, lng: 151.2195 },
    zoom: 13,
    mapTypeId: "roadmap"
  });
  // Create the search box and link it to the UI element.
  const input = document.getElementById("company_address");
  const searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  // Bias the SearchBox results towards current map's viewport.
  map.addListener("bounds_changed", () => {
    searchBox.setBounds(map.getBounds());
  });
  let markers = [];
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener("places_changed", () => {
    const places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }
    // Clear out the old markers.
    markers.forEach(marker => {
      marker.setMap(null);
    });
    markers = [];
    // For each place, get the icon, name and location.
    const bounds = new google.maps.LatLngBounds();
    places.forEach(place => {
      console.log(place)
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
      const icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };
      // Create a marker for each place.
      markers.push(
        new google.maps.Marker({
          map,
          icon,
          title: place.name,
          position: place.geometry.location
        })
      );

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
        console.log(place.geometry.location.lat());
        document.getElementById("company_lat").value=place.geometry.location.lat();
        console.log(place.geometry.location.lng());
        document.getElementById("company_lng").value=place.geometry.location.lng();
        document.getElementById("company_phone_number").value=place['formatted_phone_number'];
        document.getElementById("company_address").value=place['formatted_address'];
        document.getElementById("company_name").value=place['name'];
      } else {
        bounds.extend(place.geometry.location);
        console.log(place.geometry.location);

      }
    });
    map.fitBounds(bounds);
  });
}
  </script>
